0814---------------------------------------------------------------------
http://cosmic.mearie.org/2005/03/bmsguide/
  http://www.sapphosound.com/archives/364

리듬게임 데이터 파싱 

데이터 자르기 

HEADER FIELD  <C>
PLAYER 
GENERE
TITILE
ARTIST
BPM
PLAYLEVEL
RANK
TOTAL
STAGEFILE 
WAV
BMP 
DIFFICULTY 
BANNER
LNOBJ

xxx
샾(#) 뒤의 3자리 10진법 숫자는 마디 번호를 나타낸다. 첫째 마디는 0, 둘째 마디는 1, ...과 같은 방법으로 지정한다. 따라서 BMS 포맷으로는 1000개의 마디까지 수용할 수 있다.
yy
콜론(:) 앞의 2자리 16진법 숫자는 채널 번호를 나타낸다. 이 번호는 뒤에 따라 오는 데이터가 어떤 내용을 가리키는 지 나타내는 역할을 한다.

마디 , 채널, 

노드 리스트 -> 

마디 

채널 종류 -> 
channel #01: 배경음 채널
지정한 키값을 배경음으로 재생한다. 이 배경음은 어떤 경우에라도 항상 재생된다. 존재하지 않는 키값은 무시한다.
channel #02: 마디 단축
이 채널은 다른 채널과는 다르게 데이터로 숫자를 받는다. 지정한 실수 배로 해당 마디의 길이를 줄이거나 늘린다. (0.5일 경우 원래 길이의 반으로, 2.0일 경우 원래 길이의 두 배로) 이는 BPM의 조정과 다르며, 해당 마디가 재생되는 시간 자체가 그만큼 짧아지거나 길어지는 것을 의미한다.
channel #03: BPM 채널
해당하는 위치에서, BPM을 지정한 16진수 숫자(1부터 255까지)로 바꾼다. 예를 들어서 78은 BPM 120을 의미한다.
channel #04: BGA 채널
현재 표시되고 있는 배경 이미지 파일을 해당하는 키값에 지정된 이미지 파일로 바꾼다. 지정된 이미지는 다른 이미지가 이 채널에서 지정될 때까지 계속 보여진다.
channel #05: BM98 확장 채널
이 채널은 BM98에서만 사용할 수 있다. 따라 오는 데이터들을 순서대로 해당 마디의 큐에 넣는다. 그리고 오브젝트 채널에서 명령을 내릴 때, 해당 마디의 큐가 비어 있지 않으면 나오는 순서대로 00이 아닌 키값에 큐에서 키값을 꺼내서 그 키값에 대응하는 스프라이트를 기본 오브젝트 모양 대신 출력한다. 키값에 대응하는 스프라이트 번호는 미리 지정되어 있으며 부록에 그 목록이 있다.
channel #06: Poor BGA 채널
사용자가 오브젝트를 입력하지 못 했을 때 표시될 배경 이미지를 해당 키값의 이미지로 바꾼다. 일반적인 BGA 채널과는 달리 Poor BGA 채널은 하나 뿐이며, 투명색 등은 모두 무시된다.
channel #07: BGA 레이어 채널
현재 표시되고 있는 배경 이미지 파일을 해당하는 키값에 지정된 이미지 파일로 바꾼다. channel #04와 다른 점은 이 이미지는 channel #04에서 지정한 이미지 위에 표시된다는 것이다. (검은색, 즉 투명색으로 되어 있는 부분은 아래의 일반 BGA 이미지가 비쳐 보이게 된다.) 그래픽 편집 툴의 레이어 기능과 흡사하다.
channel #08: 확장 BPM 채널
해당하는 위치에서, BPM을 지정한 키값에 지정된 BPM 값(#BPMxx 명령으로 지정한 값)으로 변경한다.
channel #09: 시퀀스 정지 채널
해당하는 위치에서, 지정한 키값에 지정된 시간(#STOPxx 명령으로 지정한 값) 만큼 오브젝트가 움직이는 것을 멈춘다. 이미 재생되던 배경음은 그대로 재생되지만 다른 모든 것은 해당하는 시간만큼 멈춰 있게 된다.

1: 1번 건반 (맨 왼쪽에 있는 흰 건반)
2: 2번 건반 (왼쪽부터 두 번째에 있는 파란 건반)
3: 3번 건반 (왼쪽부터 세 번째에 있는 흰 건반)
4: 4번 건반 (왼쪽부터 네 번째에 있는 파란 건반)
5: 5번 건반 (왼쪽부터 다섯 번째에 있는 흰 건반)
6: 턴테이블, 혹은 스크래치
7: 페달 (원래 BM98 beta에서는 프리존 영역을 지정하는 명령이었다.)
8: 6번 건반 (7키의 경우, 왼쪽에서 여섯 번째에 있는 파란 건반)
9: 7번 건반 (7키의 경우, 왼쪽에서 일곱 번째에 있는 파란 건반)

1: Player 1의 오브젝트를 지정한다.
2: Player 2의 오브젝트를 지정한다.
3: Player 1의 투명 오브젝트를 지정한다.
4: Player 2의 투명 오브젝트를 지정한다.
5: #LNTYPE 명령이 사용되었을 경우, Player 1의 롱노트 오브젝트를 지정한다.
6: #LNTYPE 명령이 사용되었을 경우, Player 2의 롱노트 오브젝트를 지정한다.
데이터 저장 -> 전달 

노드 리스트 : 트랙 위치 , 몇번째 노드 

사운드 
사운드 노래 
노드 -> 마디 -> 트랙 -> 게임 씬 

4분의1박자  3분 

-------------------------------------------------------------------------
0815
-------------------------------------------------------------------------
0816

데이터 80퍼 완료 -> 노드 정보만 미설정

1. 남은 데이터 관리 ( 자료구조 ? ) 

2. 엘범 ? 

3. 트랙 / 노드 어떻게 넣을지

현재 코드내에서는 게임 씬에서 트랙의 위치를 지정, 트랙에 노드를 초기화 한다. 

현재 위치에 대해 트랙에 대한 노드를 하나씩 넣기만 하면된다. 

노드는 삽입 삭제가 빨라야 한다. 

그렇기 때문에 백터가 좋을거 같다. 

그다음 게임이 종료 될때 백터를 해제 해준다. 어차피 백터의 노트를 랜더 해주고 삽입 삭제를 해주기 때문에
굳이 사용이 끝났을 때 삭제?


821
알아보고자 하는 것은 1분을 BPM 만큼 나누어 각 비트당 소요시간인데,
직접 계산하신 것은 BPM을 1분으로 나누어 1초에 몇 비트 만큼 지나가는가를 보는 계산입니다.

여기서 사용되는 BPM 및 비트에 대해서 이야기를 드리면,
1 비트에 대한 시간은 4/4 박자를 기준으로 하여, 마디 내 4분음표의 길이 하나에 해당하는 소요시간입니다.
그러니까, 특별한 특징이 없는 일반적인 음악에서 4비트 연주 할 때 그 노트 하나가 차지하는 시간입니다.
4비트: 쿵쿵쿵쿵 | 쿵쿵쿵쿵 | ...
8비트: 쿵짝쿵짝쿵짝쿵짝 | 쿵짝쿵짝쿵짝쿵짝 | ... ◀ 이 경우 "쿵짝" 연주하는 시간

-
비트당 소요시간 계산 방법 = 60초 (=1분) / 208 (=tinnitus 음악 BPM)
= 0.2884615384615385

1 마디 (4비트) 소요시간 = 비트당 소요시간 * 4 = 1.153846153846154 ≒ 체감하셨던 시간인 약 1.2초

이렇게 했을 때, 전체 곡의 길이는...
음악에서 사용된 전체 마딧 수 * 1 마디 소요시간
이 됩니다.
tinnitus 의 경우, 스크립트상 153개 마디가 사용되었고, 특별히 마디 내 길이 수정은 없었던 것 같습니다.
이로 볼 때, 153개 마디 * 1.153846153846154 (1 마디
[출처] bpm 마디, 비트별 시간구하기+ 곡 전체시간구하기 (음악게임연구소*게임라운지) |작성자 소프트케이

BPM  : 175
Channel : 84

Object : 2259

Time : 116571


마디 안 노트 배치 시간 
Result => 0.3428571428571429 

 0.3428571428571429  *4
마디당 시간 : 1.371428571428571

115.2 60 1 55 

116571

===================================================================================================
0821 

데이터 출력 완성

이제 어떻게 옴길것인가 고민

타이틀 -> 음악앨범 -> 
